%% FRBNY model (original Smets and Wouters 2007 model with BGG-type financial frictions)
% Reference: Marco Del Negro, Frank Schorfheide, Chapter 2 - DSGE Model-Based Forecasting in Handbook of Economic Forecasting,
% Graham Elliott and Allan Timmermann, Editor(s). Elsevier, 2013, Volume 2, Part A, Pages 57-140, ISSN 1574-0706, ISBN 9780444536839
% http://dx.doi.org/10.1016/B978-0-444-53683-9.00002-5
% Equation numbers refer to section 7 and 8 of technical appendix:
% http://sites.sas.upenn.edu/schorf/files/hb_forecasting_appendix.pdf
% This is a model file for IRIS toolbox (iristoolbox.codeplex.com)
% This IRIS fork is required to estimate the model:
% https://iristoolbox.codeplex.com/SourceControl/network/forks/ikarib/IRISdev

!parameters
'Income share of capital !! \alpha' alp = 0.1596 % ?: Capital elasticity in the intermediate goods sector's production function (also known as the capital share).
'Depreciation rate !! \delta' del = .025 % ?: The capital depreciation rate.
'Convexity of investment adjustment costs !! S''' s2 = 2.7314 % S'': The second derivative of households' cost of adjusting investment.
'Habit persistence in consumption !! h' h = 0.5347 % h: Consumption habit persistence.
'Utilization costs !! \psi' ppsi = 0.6862 % ppsi: Utilization costs.
'Curvature of the disutility of labor !! \nu_l' nu_l = 2.5975 % ?_l: The coefficient of relative risk aversion on the labor term of households' utility function.
'Relative risk aversion !! \sigma_{c}' sigmac = 0.8719 % ?_c: No description available.
'Trend in the relative price of capital !! \Upsilon' ups = 1 % ?: The trend evolution of the price of investment goods relative to consumption goods. Set equal to 1.
'Government spending !! g^*' gstar = .18 % g_star: No description available.
% Parameters of sticky prices and wages
'Calvo parameter for prices !! \zeta_p' zeta_p = 0.894 % ?_p: The Calvo parameter. In every period, intermediate goods producers optimize prices with probability (1-?_p). With probability ?_p, prices are adjusted according to a weighted average of the previous period's inflation (?_t1) and steady-state inflation (?_star).
'Degree of backward indexation for prices !! \iota_p' iota_p = 0.1865 % ?_p: The weight attributed to last period's inflation in price indexation. (1-?_p) is the weight attributed to steady-state inflation.
'Curvature in the Kimball aggregator for prices (superelasticity of demand for intermediate goods) !! \eps_p' epsp = !if kimball; 10 !else 0 !end % ?_p: No description available.
'Steady state price markup !! \Phi' Bigphi = 1.1066 % ?: Fixed costs.
'Calvo parameter for wages !! \zeta_w' zeta_w = 0.9291 % ?_w: (1-?_w) is the probability with which households can freely choose wages in each period. With probability ?_w, wages increase at a geometrically weighted average of the steady state rate of wage increases and last period's productivity times last period's inflation.
'Degree of backward indexation for wages !! \iota_w' iota_w = 0.2992 % ?_w: No description available.
'Curvature in the Kimball aggregator for wages (superelasticity of demand for labor) !! \eps_w' epsw = !if kimball; 10 !else 0 !end % ?_w: No description available.
'Steady state wage markup !! \mu^w_*' muwstar = 1.5 % ?_w: The wage markup, which affects the elasticity of substitution between differentiated labor services.
'Degree of interest rate smoothing !! \rho' rho = 0.7126 % ?: The degree of inertia in the monetary policy rule.
'Policy reaction to deviation of inflation from target !! \psi_1' psi1 = 1.3679 % ??: Weight on inflation gap in monetary policy rule.
'Policy reaction to output gap !! \psi_2' psi2 = 0.0388 % ??: Weight on output gap in monetary policy rule.
'Policy reaction to growth differences !! \psi_3' psi3 = 0.2464 % ??: Weight on rate of change of output gap in the monetary policy rule.
!if bgg
    % Financial Frictions Parameters
    'Elasticity of spread to leverage !! \zeta_{sp,b}' zeta_spb = 0.0559 % ?_spb: The elasticity of the expected exess return on capital (or 'spread') with respect to leverage.
    'Survival rate of entrepreneurs !! \gamma_*' gammstar = 0.99 % ?_star: No description available.
!end
% exogenous processes: autocorrelations
'\rho_{g}' rho_g = 0.9863 % ?_g: AR(1) coefficient in the government spending process.
'\eta_{gz}' eta_gz = 0.84 % ?_gz: Correlate g and z shocks.
'\rho_{b}' rho_b = 0.941 % ?_b: AR(1) coefficient in the intertemporal preference shifter process.
'\rho_{\mu}' rho_mu = 0.8735 % ?_?: AR(1) coefficient in capital adjustment cost process.
'\rho_{z}' rho_z = 0.9446 % ?_z: AR(1) coefficient in the technology process.
'\rho_{z^p}' rho_zp = 0.891 % ?_z_p: Autocorrelation coefficient on the z_p shock.
'\rho_{\lambda_f}' rho_laf = 0.8827 % ?_?_f: AR(1) coefficient in the price mark-up shock process.
'\eta_{\lambda_f}' eta_laf = 0.7892 % ?_?_f: Moving average component in the price markup shock.
'\rho_{\lambda_w}' rho_law = 0.3884 % ?_?_w: AR(1) coefficient in the wage mark-up shock process.
'\eta_{\lambda_w}' eta_law = 0.4226 % ?_?_w: Moving average component in the wage markup shock.
'\rho_{rm}' rho_rm = 0.2135 % ?_rm: AR(1) coefficient in the monetary policy shock process.
'\rho_{pi}^*' rho_pist = 0.99 % ?_?_star: Autocorrelation coefficient on the ?_star shock.
!if bgg
    '\rho_{sigw}' rho_sigw = 0.9898 % ?_?_w: The standard deviation of entrepreneurs' capital productivity follows an exogenous process with mean ?_?_w. Innovations to the process are called _spread shocks_.
    '\rho_{mue}' rho_mue = 0.75 % ?_?_e: Verification costs are a fraction ?_e of the amount the bank extracts from an entrepreneur in case of bankruptcy???? This doesn't seem right because ?_e isn't a process (p12 of PDF)
    '\rho_{gamm}' rho_gamm = 0.75 % ?_?: Autocorrelation coefficient on the ? shock.
!end
'Mean of hours !! \bar{L}'  Lmean = -45.9364 % Lmean: No description available.
'I_{\alpha}^{model}' modelalp_ind = 0 % Iendo?: Indicates whether to use the model's endogenous ? in the capacity utilization adjustment of total factor productivity.
'\Gamma_{gdpdef}' gamm_gdpdef = 1.0354 % ?_gdpdef: No description available.
'\delta_{gdpdef}' del_gdpdef = 0.0181 % ?_gdpdef: No description available.
'\rho_{lr}' rho_lr = 0.6936 % ?_lr: Autocorrelation coefficient on the lr shock.
'\rho_{tfp}' rho_tfp = 0.1953 % ?_tfp: No description available.
'\rho_{gdpdef}' rho_gdpdef = 0.5379 % ?_gdpdef: GDP deflator.
'\rho_{pce}' rho_pce = 0.2320 % ?_corepce: No description available.
% exogenous processes: standard deviations
'\sigma_{g}' std_g_sh = 2.5230 % ?_g: The standard deviation of the government spending process.
'\sigma_{b}' std_b_sh = 0.0292 % ?_b: The standard deviation of the intertemporal preference shifter process.
'\sigma_{\mu}' std_mu_sh = 0.4559 % ?_?: The standard deviation of the exogenous marginal efficiency of investment shock process.
'\sigma_{z}' std_z_sh = 0.6742 % ?_z: No description available.
'\sigma_{z^p}' std_zp_sh = 0.1662 % ?_z_p: Standard deviation of the z_p shock.
'\sigma_{\lambda_f}' std_laf_sh = 0.1314 % ?_?_f: The mean of the process that generates the price elasticity of the composite good.  Specifically, the elasticity is (1+?_{f,t})/(?_{f_t}).
'\sigma_{\lambda_w}' std_law_sh = 0.3864 % ?_?_w: No description available.
'\sigma_{rm}' std_rm_sh = 0.2380 % ?_r_m: No description available.
'\sigma_{pi}^*' std_pist_sh = 0.0269 % ?_?_star: Standard deviation of the ?_star shock.
!if bgg
    '\sigma_{sigw}' std_sigw_sh = 0.0428 % ?_?_?: The standard deviation of entrepreneurs' capital productivity follows an exogenous process with standard deviation ?_?_?.
    '\sigma_{mue}' std_mue_sh = 0 % ?_?_e: Standard deviation of the ?_e shock.
    '\sigma_{gamm}' std_gamm_sh = 0 % ?_?: Standard deviation of the ? shock.
!end
'\sigma_{lr}' std_lr_sh = 0.1766 % ?_lr: Standard deviation of the lr shock.
'\sigma_{tfp}' std_tfp_sh = 0.9391 % ?_tfp: Standard deviation of the ?_tfp shock.
'\sigma_{gdpdef}' std_gdpdef_sh = 0.1575 % ?_gdpdef: Standard deviation of the gdpdef shock.
'\sigma_{pce}' std_pce_sh = 0.0999 % ?_corepce: Standard deviation of the pce shock.
% Standard deviations of the anticipated policy shocks
!for$[1:nant]$!do
    '\sigma_{ant?}' std_rm_sh? = 0.2 % ?_r_m?: Standard deviation of the ?-period-ahead anticipated policy shock.
!end
% Dynamic links to parameters and steady-state values (needed for estimation since priors are set on _ variables)
'Steady state growth rate !! \gamma' gam, gam_ = 0.3673 % quarterly percentage % ?: The log of the steady-state growth rate of technology.
'Discount rate of households !! \beta' bet, bet_ = 0.1402 % quarterly percentage % ?: Discount rate.
'Steady state spread !! spr_*' sprd, sprd_ = 1.7444 % annual percentage % spr_*: Steady-state spreads.
!if bgg
    'Steady state price level !! \pi^*' pistar, pistar_ = .5 % quarterly percentage % ?_star: The steady-state rate of inflation.
    'Default probability !! F(\omega)' Fom, Fom_ = .03 % annual percentage % F(?): The cumulative distribution function of ? (idiosyncratic iid shock that increases or decreases entrepreneurs' capital).
    'Elasticity of spread to volatility of entrepreneurial capital !! \zeta_{sp,sigw}' zeta_spsigw
    'Elasticity of spread to exogenous bankruptcy costs !! \zeta_{sp,mue}' zeta_spmue
!end
zstar,betbar
!if linear
    rstar,Rstarn,rkstar,cstar,istar,kstar,kbarstar,Lstar,ystar
    wstar, % dlinks
    !if bgg
        vstar,nstar,Gstar,muestar,vkstar,nkstar,zeta_Gsigw,zeta_Gw
        Rhostar,zeta_zmue,zeta_zsigw,zeta_zw,
        zeta_nRk,zeta_nR,zeta_nsigw,zeta_nmue,zeta_nqk,zeta_nn
        zwstar,sigwstar,omegabarstar,Gammastar,dGdomegastar,dGammadomegastar,d2Gammadomegadsigmastar,d2Gdomegadsigmastar,dg,GammamuG,GammamuGprime,zeta_bw,zeta_bw_zw,wekstar,dGammadsigmastar,dGdsigmastar,zeta_bmue,Rkstar,zeta_bsigw % dlinks
    !end
!end
!links
    gam := gam_/100;
    bet := 1/(1+bet_/100);
    sprd := (1+sprd_/100)^(1/4); % from annual perc to quarterly number
    'z^* ' zstar := log(gam+1)+(alp/(1-alp))*log(ups);
    '\bar{\beta}' betbar := bet*exp((1-sigmac)*zstar);
    !if bgg
        pistar := (pistar_/100)+1;
        Fom := 1-(1-Fom_)^(1/4); % from annualized to quarterly
        !if ~linear
            zeta_spsigw := zeta_sp(sigw,Fom,sprd,2);
            zeta_spmue := zeta_sp(sigw,Fom,sprd,3);
        !end
    !end
    !if linear
        rstar := exp(sigmac*zstar)/bet;
        Rstarn := 100*(rstar*pistar-1);
        rkstar := sprd*rstar*ups-1+del;
        wstar := (alp^(alp)*(1-alp)^(1-alp)*rkstar^(-alp)/Bigphi)^(1/(1-alp));
        Lstar := (wstar/muwstar/((1-gstar)*(alp/(1-alp)*wstar/rkstar)^alp/Bigphi-(1-(1-del)/ups*exp(-zstar))*ups*exp(zstar)*alp/(1-alp)*wstar/rkstar)/(1-h*exp(-zstar)))^(1/(1+nu_l));
        kstar := (alp/(1-alp))*wstar*Lstar/rkstar;
        kbarstar := kstar*(gam+1)*ups^(1/(1-alp));
        istar := kbarstar*( 1-((1-del)/((gam+1)*ups^(1/(1-alp)))) );
        ystar := (kstar^alp)*(Lstar^(1-alp))/Bigphi;
        cstar := (1-gstar)*ystar - istar;
        !if bgg
            zwstar := norminv(Fom);
            sigwstar := solve_sigw(zeta_spb,Fom,sprd);
            Gstar := normcdf(zwstar-sigwstar);
            omegabarstar := exp(sigwstar*(zwstar-sigwstar/2));
            Gammastar := omegabarstar*(1-Fom)+Gstar;
            dGammadomegastar := 1-Fom;
            dGammadsigmastar := -normpdf(zwstar-sigwstar);
            dGdomegastar := normpdf(zwstar)/sigwstar;
            dGdsigmastar := zwstar*dGammadsigmastar/sigwstar;
            d2Gammadomegadsigmastar := dGdomegastar*(zwstar-sigwstar);
            d2Gdomegadsigmastar := -dGdomegastar*(1-zwstar*(zwstar-sigwstar))/sigwstar;
            dg := dGdomegastar/dGammadomegastar;

            % evaluate mu, nk, and Rhostar
            muestar := (1-1/sprd)/(dg*(1-Gammastar)+Gstar);
            GammamuG := Gammastar-muestar*Gstar;
            GammamuGprime := dGammadomegastar-muestar*dGdomegastar;
            nkstar := 1-sprd*GammamuG;

            % elasticities wrt omegabar
            zeta_bw := muestar*nkstar*(zwstar/sigwstar-dg)/(1/dg-muestar);
            zeta_zw := omegabarstar*dGdomegastar*(1/dg-muestar)/GammamuG;
            zeta_bw_zw := zeta_bw/zeta_zw;

            % evaluate wekstar and vkstar
            wekstar := (1-gammstar/betbar)*nkstar-gammstar/betbar*(sprd*(1-muestar*Gstar)-1);
            vkstar := (nkstar-wekstar)/gammstar;

            % evaluate nstar and vstar
            nstar := nkstar*kbarstar;
            vstar := vkstar*kbarstar;

            % elasticities wrt mue
            zeta_bmue := -muestar*(nkstar*dGammadomegastar*dGdomegastar/GammamuGprime+dGammadomegastar*Gstar*sprd)/
                ((1-Gammastar)*GammamuGprime*sprd+dGammadomegastar*(1-nkstar));
            zeta_zmue := -muestar*Gstar/GammamuG;
            zeta_spmue := (zeta_bw_zw*zeta_zmue-zeta_bmue)/(1-zeta_bw_zw);

            % elasticities wrt sigw
            zeta_bsigw := sigwstar*(((1-muestar*dGdsigmastar/dGammadsigmastar)/
                (1-muestar*dGdomegastar/dGammadomegastar)-1)*dGammadsigmastar*sprd+
                muestar*nkstar*(dGdomegastar*d2Gammadomegadsigmastar-dGammadomegastar*d2Gdomegadsigmastar)/
                GammamuGprime^2)/((1-Gammastar)*sprd+dGammadomegastar/GammamuGprime*(1-nkstar));
            zeta_zsigw := sigwstar*(dGammadsigmastar-muestar*dGdsigmastar)/GammamuG;
            zeta_spsigw := (zeta_bw_zw*zeta_zsigw-zeta_bsigw)/(1-zeta_bw_zw);

            % some ratios/elasticities
            Rkstar := sprd*rstar*pistar;
            Rhostar := 1/nkstar-1;
            zeta_Gw := dGdomegastar/Gstar*omegabarstar;
            zeta_Gsigw := dGdsigmastar/Gstar*sigwstar;

            % elasticities for the net worth evolution
            zeta_nRk := gammstar*Rkstar/pistar/exp(zstar)*(1+Rhostar)*(1-muestar*Gstar*(1-zeta_Gw/zeta_zw));
            zeta_nR := gammstar/betbar*(1+Rhostar)*(1-nkstar+muestar*Gstar*sprd*zeta_Gw/zeta_zw);
            zeta_nqk := gammstar*Rkstar/pistar/exp(zstar)*(1+Rhostar)*(1-muestar*Gstar*(1+zeta_Gw/zeta_zw/Rhostar))-gammstar/betbar*(1+Rhostar);
            zeta_nn := gammstar/betbar+gammstar*Rkstar/pistar/exp(zstar)*(1+Rhostar)*muestar*Gstar*zeta_Gw/zeta_zw/Rhostar;
            zeta_nmue := gammstar*Rkstar/pistar/exp(zstar)*(1+Rhostar)*muestar*Gstar*(1-zeta_Gw*zeta_zmue/zeta_zw);
            zeta_nsigw := gammstar*Rkstar/pistar/exp(zstar)*(1+Rhostar)*muestar*Gstar*(zeta_Gsigw-zeta_Gw/zeta_zw*zeta_zsigw);
        !end
    !end
!transition_variables
!for <{'','_f'}> !do
    'Output !! y?' y?
    'Consumption !! c?' c?
    'Investment !! i?' i?
    'Effective capital !! k?' k?
    'Installed capital !! \bar{k}?' kbar?
    'Real wage !! w?' w?
    'Gross nominal return on capital for entrepreneurs !! \tilde{R}^k' Rktil?
    'Rental rate of capital !! r^k?' rk?
    'Price of capital !! q^k?' qk?
    'Labor supply !! L?' L?
    'Marginal Utility of Consumption !! \xi?' xi?
    'Variable capacity utilization !! u?' u?
    'Real marginal substitution !! \mu^w?' muw?
    'Real marginal costs !! mc?' mc?
    'Spread between returns on capital and gov bonds !! spr' spread?
    'Gross nominal interest rate on gov bonds' R?
    'Inflation' pi?
!end
'Technology' z
'Neutral Technology !! \tilde{z}' ztil
'Long run changes to productivity !! z_p' zp
'Government spending' g
'Intertemporal preference shifter' b
'Marginal efficiency of investment !! \mu' mu
'Price mark-up !! \lambda_f' laf
'Price mark-up shock' laf1
'Wage mark-up !! \lambda_w' law
'Wage mark-up shock' law1
!if ~linear && ~kimball
    p1,p2,chi_p,w1,w2,chi_w
!end
'Time-varying inflation target !! \pi^*' pist
'Monetary policy shock !! r^m' rm
!if bgg
    'Entrepreneurial net worth' n
    'Shock to dispersion of entrepreneurial abilities !! \sigma_w' sigw = 0.5
    'Spread shock !! \mu_e' mue
    'Net worth shock' gamm
    !if ~linear
        'Entrepreneurial equity' v
        'Threshold level of entrepreneurial capital shock !! \bar{\omega}' omegabar
        Gamma,dGamma,G,dG,
    !end
!end
'Measurement error for long run rate' lr
'Measurement error for Fernald TFP' tfp
'Measurement error for GDP Deflator' gdpdef
'Measurement error for core PCE' pce
'10 yrs infl exp' E_pi
'long rate exp' E_R
!for$[1:nant]$!do
    'Expected FFR derived from OIS quotes' E_R?
!end
% process for the anticipated shocks, so that the shocks can be passed from period to period.
!for$[1:nant]$!do,rm?!end
!if ~linear
    !log_variables
    !all_but
    z,ztil,zp,g,b,mu,rm,laf1,law1,pist,lr,tfp,gdpdef,pce!for$[1:nant]$!do,rm?!end
    obs_gdp,obs_hours,obs_wages,obs_gdpdeflator,obs_corepce,obs_nominalrate,obs_consumption,obs_investment,obs_spread,obs_longinflation,obs_longrate,obs_tfp!for$[1:nant]$!do,obs_ois?!end
!end
!transition_shocks
'Government spending shock' g_sh
'Intertemporal preference shifter shock' b_sh
'MEI shock' mu_sh
'Productivity shock' z_sh
'Long run productivity shock' zp_sh
'Price mark-up shock' laf_sh
'Wage mark-up shock' law_sh
'Monetary policy shock' rm_sh
'Inflation target shock' pist_sh
!if bgg
    'Entrepreneurial volatility shock' sigw_sh
    'Spread shock' mue_sh
    'Net worth shock' gamm_sh
!end
'Long run rate measur.shock' lr_sh
'Fernald TFP measur.shock' tfp_sh
'GDP Deflator measur.shock' gdpdef_sh
'Core PCE measur.shock' pce_sh
!for$[1:nant]$!do
    'Anticipated monetary policy shock, ?q' rm_sh?
!end

%%%%%%%%%%%%%%%%%%%%%%%% Equilibrium conditions %%%%%%%%%%%%%%%%%%%%%%%%
!transition_equations
!for <{'','_f'}> !do
    'Consumption Euler Equation !! euler?'
    !if linear
        xi? = R?-pi?{1}+b+xi?{1}-sigmac*z{1}; % 8.89
    !else
        xi? = bet*exp(-sigmac*z{1})*xi?{1}*R?/pi?{1}*exp(b) !! R? = exp(sigmac*z)*pi?/bet; % 8.49,8.52
    !end
    'Marginal Utility of Consumption !! muc?'
    !if linear
        xi? = -sigmac/(1-h*exp(-zstar))*(c?-h*exp(-zstar)*(c?{-1}-z))+(sigmac-1)*Lstar^(1+nu_l)*L?; % 8.90-
    !else
        xi? = (c?-h*c?{-1}*exp(-z))^-sigmac*exp((sigmac-1)/(1+nu_l)*L?^(1+nu_l)); % 8.48,8.51
    !end
    'Investment Euler Equation !! inv?'
    !if linear
        qk? = s2*exp(2*zstar)*((1+betbar)*(i?-mu)-i?{-1}+z-betbar*(i?{1}+z{1})); % 8.94
    !else
        qk?*exp(s2*exp(2*$z)*(1+betbar)*mu)*(1-s2/2*(i?/i?{-1}*exp(z)-exp($z))^2-s2*(i?/i?{-1}*exp(z)-exp($z))*i?/i?{-1}*exp(z))
          =1-bet*exp(-sigmac*z{1})*qk?{1}*xi?{1}/xi?*exp(s2*exp(2*$z)*(1+betbar)*mu{1})
          *s2*(i?{1}/i?*exp(z{1})-exp($z))*(i?{1}/i?*exp(z{1}))^2 !! qk? = 1; % 8.58,8.61
    !end
    'Evolution of Capital !! capev?'
    !if linear
        kbar? = (1-istar/kbarstar)*(kbar?{-1}-z) + istar/kbarstar*i? + istar/kbarstar*s2*exp(2*zstar)*(1+betbar)*mu; % 8.100
    !else
        kbar? = (1-del)*kbar?{-1}/ups*exp(-z)+exp(s2*exp(2*$z)*(1+betbar)*mu)*(1-s2/2*(i?/i?{-1}*exp(z)-exp($z))^2)*i? !! i? = (1-(1-del)/ups*exp(-z))*kbar?; % 8.55,8.57
    !end
    'Return to Capital !! capval?'
    !if linear
        Rktil?-pi? = (rkstar*rk?+(1-del)*qk?)/(rkstar+1-del) - qk?{-1}; % 7.52
    !else
        Rktil?/pi? = (rk?*u?+(1-del)*qk?-$rk?*(ppsi/(1-ppsi)*(u?-1)^2/2+u?-1))/qk?{-1}/ups !! rk? = Rktil?/pi?*ups-1+del; % 7.15,7.38
    !end
    'Effective capital rented to firms !! capsrv?'
    !if linear
        k? = u? - z + kbar?{-1}; % 8.98
    !else
        k? = u?/ups*exp(-z)*kbar?{-1} !! kbar? = k?*exp(z)*ups; % 8.54,8.56
    !end
    'Capital Utilization !! caputl?'
    !if linear
        u? = (1-ppsi)/ppsi*rk?; % 8.99
    !else
        rk? = $rk?*(ppsi/(1-ppsi)*(u?-1)+1) !! u? = 1; % 8.60,8.63
    !end
    'Price Markup !! mkupp?'
    !if linear
        mc? = w? + alp*(L?-k?); % 8.102
    !else
        w? = (1-alp)*(mc?*(alp/rk?)^alp)^(1/(1-alp)); % 8.39,8.40
    !end
    'Rental Rate of Capital !! caprnt?'
    !if linear
        k? = w? - rk? + L?; % 8.104
    !else
        k? = alp/(1-alp)*w?/rk?*L?; % 8.46,8.47
    !end
    'Aggregate Production Function !! output?'
    !if linear
        y? =  Bigphi*(alp*k?+(1-alp)*L?); % 8.97
    !else
        y? = k?^alp*L?^(1-alp)-(Bigphi-1)*$y? !! y? = k?^alp*L?^(1-alp)/Bigphi; % 8.70,8.76
    !end
    'Resource Constraint !! res?'
    !if linear
        y? = ( cstar*c? + istar*i? + rkstar*kstar*u? )/ystar + gstar*g; % 8.88
    !else
        y? = c?+i?+(ppsi/(1-ppsi)*(u?-1)^2/2+u?-1)/u?*$rk?*k?+$y?*gstar*exp(g) !! c? = (1-gstar)*y?-i?; % 8.69,8.75
    !end
    'Marginal rate of substitution between consumption and labor !! msub?'
    !if linear
        w? = (c?-h*exp(-zstar)*(c?{-1}-z))/(1-h*exp(-zstar)) + nu_l*L? + muw?; % 8.105
    !else
        w? = (c?-h*c?{-1}*exp(-z))*L?^nu_l*muw? !! L? = (w?/muw?/((1-gstar)*(alp/(1-alp)*w?/rk?)^alp/Bigphi-(exp(z)-(1-del)/ups)*ups*alp/(1-alp)*w?/rk?)/(1-h*exp(-z)))^(1/(1+nu_l)); % 8.50,8.53
    !end
    'Capital Euler Equation !! capeu?'
    !if linear
        spread? = Rktil?{1}-R?-b; % 8.95,7.50
    !else
        spread? = Rktil?{1}/R?/exp(b) !! Rktil? = sprd*R?; % 8.59,8.62
    !end
!end % for loop
% Flexible economy
!if linear
    mc_f = 0;
    muw_f = 0;
    spread_f = 0;
    pi_f = 0;
!else
    mc_f = 1/Bigphi;
    muw_f = muwstar;
    spread_f = sprd;  % note: spread_f > 1
    pi_f = pistar;
!end
% Sticky prices and wages
'Phillips Curve !! phlps'
!if linear
    pi = ( ((1-zeta_p*betbar)*(1-zeta_p))/zeta_p/((Bigphi-1)*epsp+1)*mc
     + iota_p*pi{-1} + betbar*pi{1} )/(1+iota_p*betbar) + (1-zeta_p*betbar)*(1/zeta_p-1)/(1+iota_p*betbar)/(1+(Bigphi-1)*epsp)*(1-1/Bigphi)*laf; % 8.103
!else
    !if kimball
        % Kimball aggregator for prices (linearized)
        log(pi/$pi) = ( ((1-zeta_p*betbar)*(1-zeta_p))/zeta_p/((Bigphi-1)*epsp+1)*log(mc/$mc)
         + iota_p*log(pi{-1}/$pi) + betbar*log(pi{1}/$pi) )/(1+iota_p*betbar)
         + (1-zeta_p*betbar)*(1/zeta_p-1)/(1+iota_p*betbar)/(1+(Bigphi-1)*epsp)*(1-1/Bigphi)*log(laf/$laf) !! mc=1/Bigphi; % 8.103,,8.42
    !else
        % Dixit-Stiglitz CES aggregator for prices
        1 = (1-zeta_p)*(p2/p1)^(1/$laf)+zeta_p/chi_p^(1/$laf) !! p1=p2; % 8.43,8.44
        p1 = xi*y*mc*(1+1/laf)+zeta_p*bet*exp((1-sigmac)*z{1})*p1{1}/chi_p{1}^(1+1/$laf) !! mc=1/Bigphi; % 8.41,8.42
        p2 = xi*y/laf+zeta_p*bet*exp((1-sigmac)*z{1})*p2{1}/chi_p{1}^(1/$laf) !! p2=xi*y/laf/(1-zeta_p*betbar);
        chi_p = (pi{-1}/$pi)^iota_p*$pi/pi !! chi_p = 1;
    !end
!end
'Evolution of Wages !! wage'
!if linear
    w = ( (1-zeta_w*betbar)*(1-zeta_w)/zeta_w/((muwstar-1)*epsw+1)*-muw
%      - (1+iota_w*betbar)*pi + (w{-1}+iota_w*pi{-1}-z)  % BUG in MDN
     - (1+iota_w*betbar)*(pi+z) + (w{-1}+iota_w*(pi{-1}+z{-1}))
     + betbar*(w{1}+z{1}+pi{1}) )/(1+betbar) + (1-zeta_w*betbar)*(1/zeta_w-1)/(1+betbar)/(1+(muwstar-1)*epsw)*(1-1/muwstar)*law; % 8.106
!else
    !if kimball
        % Kimball aggregator for wages (linearized)
        log(w/$w) = ( (1-zeta_w*betbar)*(1-zeta_w)/zeta_w/((muwstar-1)*epsw+1)*-log(muw/$muw)
         - (1+iota_w*betbar)*(log(pi/$pi)+z-$z) + (log(w{-1}/$w)+iota_w*(log(pi{-1}/$pi)+z{-1}-$z))
         + betbar*(log(w{1}/$w)+z{1}-$z+log(pi{1}/$pi)) )/(1+betbar)
         + (1-zeta_w*betbar)*(1/zeta_w-1)/(1+betbar)/(1+(muwstar-1)*epsw)*(1-1/muwstar)*log(law/$law) !! muw=muwstar; % 8.106,8.66
    !else
        % Dixit-Stiglitz CES aggregator for wages
        1 = (1-zeta_w)*(w*w2/w1)^(1/$law)+zeta_w*(w/w{-1}/chi_w)^(1/$law) !! w1=w2*w; % 8.65,8.67
        w1 = xi*L*w^(2+1/$law)/muw*(1+1/law)+zeta_w*bet*exp((1-sigmac)*z{1})*w1{1}/chi_w{1}^(1+1/$law) !! muw=muwstar; % 8.64,8.66
        w2 = xi*L*w^(1+1/$law)/law+zeta_w*bet*exp((1-sigmac)*z{1})*w2{1}/chi_w{1}^(1/$law) !! w2=xi*L*w^(1+1/law)/law/(1-zeta_w*betbar);
        chi_w = (pi{-1}/$pi*exp(z{-1}-$z))^iota_w*$pi/pi*exp($z-z) !! chi_w = 1;
    !end
!end
'Monetary Policy Rule !! mp'
!if linear
    R = rho*R{-1} + (1-rho)*(psi1*(pi-pist)+psi2*(y-y_f)) + psi3*diff(y-y_f) + rm; % 8.103
!else
    R/$R = (R{-1}/$R)^rho * ( (pi/$pi/exp(pist))^psi1 * (y/y_f)^psi2 )^(1-rho) * (y/y{-1}*y_f{-1}/y_f)^psi3 * exp(rm) !! pi = pistar; % 8.22
!end
%% Exogenous Processes
'Neutral Technology !! eq_z'
!if linear
    z = diff(ztil)/(1-alp) + zp; % 8.36
!else
    z-$z = diff(ztil)/(1-alp) + zp !! z = zstar; % 8.36
!end
'Linearly detrended log productivity process !! eq_ztil'
ztil = rho_z*ztil{-1} + z_sh !! ztil = 0; % 8.2
'Extra term for long run changes to productivity; added by MDC  !! eq_zp'
zp = rho_zp*zp{-1} + zp_sh !! zp = 0;
'Government spending shock !! eq_g'
g = rho_g*g{-1} + g_sh + eta_gz*z_sh !! g = 0; % 8.29
'Intertemporal preference shifter shock !! eq_b'
b = rho_b*b{-1} + b_sh*(-sigmac*(1+h*exp(-zstar))/(1-h*exp(-zstar))) !! b = 0; % 8.30
'Investment specific technology shock !! eq_mu'
mu = rho_mu*mu{-1} + mu_sh !! mu = 0; % 8.31
'Monetary policy shock !! eq_rm'
rm = rho_rm*rm{-1} + rm_sh !if nant>0;+ rm1{-1}!end !! rm = 0; % 8.32
'Price mark-up shock !! eq_laf'
!if linear
    laf = rho_laf*laf{-1} + laf1 - eta_laf*laf1{-1} !! laf = 0; % 8.33
!else
    log(laf/$laf) = rho_laf*log(laf{-1}/$laf) + laf1 - eta_laf*laf1{-1} !! laf = Bigphi-1; % 8.33
!end
laf1 = laf_sh/((1-zeta_p*betbar)*(1/zeta_p-1)/(1+iota_p*betbar)/(1+(Bigphi-1)*epsp)*(1-1/Bigphi));
'Wage mark-up shock !! eq_law' % eq 15++
!if linear
    law = rho_law*law{-1} + law1 - eta_law*law1{-1} !! law = 0; % 8.34
!else
    log(law/$law) = rho_law*log(law{-1}/$law) + law1 - eta_law*law1{-1} !! law = muwstar-1; % 8.33
!end
law1 = law_sh/((1-zeta_w*betbar)*(1/zeta_w-1)/(1+betbar)/(1+(muwstar-1)*epsw)*(1-1/muwstar));
'Long term inflation expectations !! eq_pist'
pist = rho_pist*pist{-1} + pist_sh !! pist = 0; % AEJ(18)
%% FINANCIAL FRICTIONS:
'Spreads !! spread'
!if ~bgg
    % assume no financial frictions
    !if linear
        spread = 0;
    !else
        spread = sprd;
    !end
!else
    !if linear
        spread = zeta_spb*(qk+kbar-n) + zeta_spsigw*sigw + zeta_spmue*mue; % 7.50
    !else
        mue = (1-1/spread)/(dG{1}/dGamma{1}*(1-Gamma{1})+G{1}); % 7.9,7.33
    !end
    'Zero-profit condition !! zp'
    !if linear
%         0=Rktil-R{-1}-b{-1}+zeta_zw*omegabar+zeta_zsigw*sigw{-1}+zeta_zmue*mue{-1}+(n{-1}-qk{-1}-kbar{-1})/Rhostar; % 7.40
    !else
        (Gamma-mue{-1}*G)*Rktil/R{-1}/exp(b{-1}) = 1-n{-1}/qk{-1}/kbar{-1} !! n = (1-sprd*(Gamma-mue*G))*kbar; % 7.18,7.24
        Gamma = omegabar*dGamma+G;
        dGamma = 1-normcdf(log(omegabar)/sigw{-1}+sigw{-1}/2) !! dGamma = 1-Fom;
        G = normcdf(log(omegabar)/sigw{-1}-sigw{-1}/2);
        dG = normpdf(log(omegabar)/sigw{-1}+sigw{-1}/2)/sigw{-1};
    !end
    'Evolution of Net Worth !! nevol'
    !if linear
        n = zeta_nRk*(Rktil-pi) - zeta_nR*(R{-1}-pi+b{-1})
             + zeta_nqk*(qk{-1}+kbar{-1}) + zeta_nn*n{-1}
             + gammstar*vstar/nstar*(gamm-z) - zeta_nmue*mue{-1} - zeta_nsigw*sigw{-1}; % 7.51
%         betbar*vkstar*(v+z) = (nkstar-1)*(R{-1}-pi+b{-1})+nkstar*n{-1}+(sprd*(1-muestar*Gstar)-1)*(qk{-1}+kbar{-1}+Rktil-pi)+Rktil-pi-sprd*muestar*Gstar*(mue{-1}+zeta_Gw*omegabar+zeta_Gsigw*sigw{-1}); % 7.44
%         n = gammstar*vstar/nstar*(gamm+v);
    !else
        v*exp(z) = ((1-mue{-1}*G)*Rktil/pi-(1-n{-1}/qk{-1}/kbar{-1})*R{-1}/pi*exp(b{-1}))*qk{-1}*kbar{-1} !! v = sprd/betbar*kbar*(1-Gamma); % 7.19,7.24,7.25
        n-gamm*v = $n-$gamm*$v !! spread = sprd;
    !end
    'sigw shock !! eq_sigw'
    !if linear
        sigw = rho_sigw*sigw{-1} + sigw_sh/zeta_spsigw;
    !else
        log(sigw/$sigw) = rho_sigw*log(sigw{-1}/$sigw) + sigw_sh/zeta_spsigw !! sigw = solve_sigw(zeta_spb,Fom,sprd);
    !end
    'mue shock !! eq_mue'
    !if linear
        mue = rho_mue*mue{-1} + mue_sh/zeta_spmue;
    !else
        log(mue/$mue) = rho_mue*log(mue{-1}/$mue) + mue_sh/zeta_spmue !! omegabar = exp(sigw*(norminv(Fom)-sigw/2));
    !end
    'gamm shock !! eq_gamm'
    !if linear
        gamm = rho_gamm*gamm{-1} + gamm_sh/gammstar*nstar/vstar;
    !else
        log(gamm/$gamm) = rho_gamm*log(gamm{-1}/$gamm) + gamm_sh/$gamm*$n/$v !! gamm = gammstar;
    !end
!end % if bgg
%% ANTICIPATED SHOCKS
% This section adds the anticipated shocks. There is one state for all the anticipated shocks that will hit in a given period (i.e. rm2 holds
% those that will hit in two periods), and the equations are set up so that rm2 last period will feed into rm1 this period (and so on for other
% numbers), and last period's rm1 will feed into the rm process (and affect the Taylor Rule this period).
!for$[1:nant]$!do
    'Anticipated shocks !! eq_rm?'
    rm? = rm_sh? !if ?<nant;+ rm$[?+1]${-1}!end;
!end
% measurement errors
lr = rho_lr*lr{-1} + lr_sh !! lr = 0;
tfp = rho_tfp*tfp{-1} + tfp_sh !! tfp = 0;
gdpdef = rho_gdpdef*gdpdef{-1} + gdpdef_sh !! gdpdef = 0;
pce = rho_pce*pce{-1} + pce_sh !! pce = 0;
E_pi = movavg(pi{1},40) !! E_pi = pi;
E_R = movavg(R{1},40) !! E_R = R;
!for$[1:nant]$!do
    E_R? = R{?} !! E_R? = R;
!end
%% Declare Measurement Variables (aka Observables)
!measurement_variables
'Output Growth' obs_gdp
'Hours Worked' obs_hours
'Labor Share/Real Wage Growth' obs_wages
'Inflation (GDP Deflator)' obs_gdpdeflator
'Inflation (Core PCE)' obs_corepce
'Federal Funds Rate' obs_nominalrate
'Consumption Growth' obs_consumption
'Investment Growth' obs_investment
'Spread (Baa)' obs_spread
'10-year Inflation Expectations' obs_longinflation
'10-year Interest Rate' obs_longrate
'Total Factor Productivity' obs_tfp
!for$[1:nant]$!do
    '?-quarter Interest Rate Expectations' obs_ois?
!end
!measurement_equations
'Output Growth (Bureau of Economic Analysis) - Quarterly!'
!if linear
    obs_gdp = diff(y) + z;
!else
    obs_gdp = difflog(y) + z - $z + 100*(exp($z)-1);
!end
'Hours Worked (Bureau of Labor Statistics)'
!if linear
    obs_hours = L;
!else
    obs_hours = log(L/$L) + Lmean;
!end
'Labor Share/Real Wage Growth (Bureau of Labor Statistics)'
!if linear
    obs_wages = diff(w) + z;
!else
    obs_wages = difflog(w) + z - $z + 100*(exp($z)-1);
!end
'Inflation (GDP Deflator) (Bureau of Economic Analysis)'
!if linear
    obs_gdpdeflator = gamm_gdpdef*pi + gdpdef;
!else
    obs_gdpdeflator = gamm_gdpdef*log(pi/$pi) + gdpdef + 100*($pi-1) + del_gdpdef;
!end
'Inflation (Core PCE) (Bureau of Economic Analysis)'
!if linear
    obs_corepce = pi + pce;
!else
    obs_corepce = log(pi/$pi) + pce + 100*($pi-1);
!end
'Nominal interest rate/Federal Funds Rate (Board of Governors of the Federal Reserve System)'
!if linear
    obs_nominalrate = R;
!else
    obs_nominalrate = log(R/$R) + 100*($R-1);
!end
'Consumption Growth (Bureau of Economic Analysis)'
!if linear
    obs_consumption = diff(c) + z;
!else
    obs_consumption = difflog(c) + z - $z + 100*(exp($z)-1);
!end
'Investment Growth (Bureau of Economic Analysis)'
!if linear
    obs_investment = diff(i) + z;
!else
    obs_investment = difflog(i) + z - $z + 100*(exp($z)-1);
!end
'Spread (Baa) (Board of Governors of the Federal Reserve System)'
!if linear
    obs_spread = spread + b;
!else
    obs_spread = log(spread/$spread) + b + 100*log($spread);
!end
'10-year Inflation Expectations (Federal Reserve Bank of Philadelphia)'
!if linear
    obs_longinflation = E_pi;
!else
    obs_longinflation = log(E_pi/$pi) + 100*($pi-1);
!end
'10-year Interest Rate (Board of Governors of the Federal Reserve System)'
!if linear
    obs_longrate = E_R + lr;
!else
    obs_longrate = log(E_R/$R) + lr + 100*($R-1);
!end
'Total Factor Productivity (Federal Reserve Bank of San Francisco)'
!if linear
    obs_tfp = (1-alp*modelalp_ind)*z + tfp + alp/(1-alp*(1-modelalp_ind))*diff(u);
!else
    obs_tfp = (1-alp*modelalp_ind)*(z-$z) + tfp + alp/(1-alp*(1-modelalp_ind))*difflog(u);
!end
!for$[1:nant]$!do
    'Expected FFR derived from OIS quotes (BCFF survey)'
    !if linear
        obs_ois? = E_R?;
    !else
        obs_ois? = log(E_R?/$R) + 100*($R-1);
    !end
!end
!if linear
!dtrends
    obs_gdp += 100*(exp(zstar)-1);
    obs_hours += Lmean;
    obs_wages += 100*(exp(zstar)-1);
    obs_gdpdeflator += 100*(pistar-1) + del_gdpdef;
    obs_corepce += 100*(pistar-1);
    obs_nominalrate += Rstarn;
    obs_consumption += 100*(exp(zstar)-1);
    obs_investment += 100*(exp(zstar)-1);
    obs_spread += 100*log(sprd);
    obs_longinflation += 100*(pistar-1);
    obs_longrate += Rstarn;
    !for$[1:nant]$!do
        obs_ois? += Rstarn;
    !end
!end
!reporting_equations
'Annual inflation !! pi_a'
pi_a = movsum(pi,4);